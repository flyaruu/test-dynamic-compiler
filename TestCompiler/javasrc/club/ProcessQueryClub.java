package club;

import com.dexels.navajo.server.*;
import com.dexels.navajo.mapping.*;
import com.dexels.navajo.document.*;
import com.dexels.navajo.parser.*;
import java.util.ArrayList;
import java.util.HashMap;
import com.dexels.navajo.server.enterprise.tribe.TribeManagerFactory;
import com.dexels.navajo.mapping.compiler.meta.IncludeDependency;
import com.dexels.navajo.mapping.compiler.meta.ExpressionValueDependency;
import com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency;
import com.dexels.navajo.mapping.compiler.meta.InheritDependency;
import com.dexels.navajo.mapping.compiler.meta.JavaDependency;
import com.dexels.navajo.mapping.compiler.meta.NavajoDependency;
import com.dexels.navajo.mapping.compiler.meta.Dependency;
import com.dexels.navajo.mapping.compiler.meta.AdapterFieldDependency;
import java.util.Stack;


/**
 * Generated Java code by TSL compiler.
 * $Id$
 *
 * Java version: Java HotSpot(TM) 64-Bit Server VM (1.6.0_33-b03-424-11M3720)
 * OS: Mac OS X 10.7.4
 *
 * WARNING NOTICE: DO NOT EDIT THIS FILE UNLESS YOU ARE COMPLETELY AWARE OF WHAT YOU ARE DOING
 *
 */

public final class ProcessQueryClub extends CompiledScript {


private volatile static ArrayList<Dependency> dependentObjects = null;

  public ProcessQueryClub() {
         if ( dependentObjects == null ) {
             dependentObjects = new ArrayList<Dependency>();
             setDependencies();
        }
  }

public final void setValidations() {
conditionArray = new String[]{
""};
ruleArray = new String[]{
"( ?[/QueryUpdateClub/ClubIdentifier] AND Trim([/QueryUpdateClub/ClubIdentifier]) != '' AND               SingleValueQuery('sportlinkkernel:SELECT COUNT(*) FROM organization WHERE organizationid = ?',                                Trim([/QueryUpdateClub/ClubIdentifier])) == 1             )             OR             ( ?[/Club/ClubIdentifier] AND Trim([/Club/ClubIdentifier]) != '' AND               SingleValueQuery('sportlinkkernel:SELECT COUNT(*) FROM organization WHERE organizationid = ?',                                Trim([/Club/ClubIdentifier])) == 1             )"};
codeArray = new String[]{
"2002"};
descriptionArray = new String[]{
""};
}

public final void finalBlock(Access access) throws Exception {
}
public final void execute(Access access) throws Exception { 

inDoc = access.getInDoc();
{ // Starting new mappable object context. 
  treeNodeStack.push(currentMap);
  currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.navajo.adapter.NavajoAccess").newInstance(), false);
  mappableObject0 = (com.dexels.navajo.adapter.NavajoAccess) currentMap.myObject;
  mappableObject0.load(access);
  try {
    matchingConditions = false;
    {
      sValue = mappableObject0.getRpcUser();
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
    subtype = "";
    p = MappingUtils.setProperty(true, currentParamMsg, "NavajoUser", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
    matchingConditions = false;
    if (Condition.evaluate("?[/__globals__/RegionOwner]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))    {
      op = Expression.evaluate("$rpcUser + '/' + [/__globals__/RegionOwner]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
     else 
    {
      op = Expression.evaluate("$rpcUser + '/'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
    subtype = "";
    p = MappingUtils.setProperty(true, currentParamMsg, "UpdateBy", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
  } catch (Exception e2) {
  MappingUtils.callKillMethod( mappableObject0);
    throw e2;
  }
  MappingUtils.callStoreMethod(mappableObject0);
  currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
} // EOF MapContext 
matchingConditions = false;
{
  sValue = "Oracle";
  matchingConditions = true;
}
type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
subtype = "";
p = MappingUtils.setProperty(true, currentParamMsg, "DatabaseProductName", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
matchingConditions = false;
{
  sValue = "20.1";
  matchingConditions = true;
}
type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
subtype = "";
p = MappingUtils.setProperty(true, currentParamMsg, "DatabaseVersion", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
if (true) {
  com.dexels.navajo.document.Method m = NavajoFactory.getInstance().createMethod(access.getOutputDoc(), "club/ProcessUpdateClub", "");
  m.setDescription("");
  m.addRequired("ClubData", "");
  access.getOutputDoc().addMethod(m);
}
{ // Starting new mappable object context. 
  treeNodeStack.push(currentMap);
  currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.navajo.adapter.SQLMap").newInstance(), false);
  mappableObject1 = (com.dexels.navajo.adapter.SQLMap) currentMap.myObject;
  mappableObject1.load(access);
  try {
    if (true) {
      {
        sValue = "sportlinkkernel";
        matchingConditions = true;
      }
      mappableObject1.setDatasource((String) sValue);
    }
    matchingConditions = false;
    if (Condition.evaluate("?[/QueryUpdateClub/ClubIdentifier] AND StringFunction( 'length', [/QueryUpdateClub/ClubIdentifier] ) > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))    {
      op = Expression.evaluate("[/QueryUpdateClub/ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
     else 
    {
      op = Expression.evaluate("[/Club/ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
    subtype = "";
    p = MappingUtils.setProperty(true, currentParamMsg, "ClubIdentifier", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
    matchingConditions = false;
    {
      sValue = new Integer(mappableObject1.getTransactionContext());
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
    subtype = "";
    p = MappingUtils.setProperty(true, currentParamMsg, "TransactionContext", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
    if (true) {
      {
        sValue = "SELECT vw_club.name\n                 , vw_club.shortname\n                 , vw_club.activeentity\n                 , vw_club.lastupdate\n                 , vw_club.updateby\n                 , vw_club.addressid\n                 , vw_club.streetname\n                 , vw_club.housenumber\n                 , vw_club.numberappendix\n                 , vw_club.city\n                 , vw_club.zipcode\n                 , vw_club.countryid\n                 , vw_club.remarks\n                 , vw_club.referencetype\n                 , vw_club.typeofaddress\n                 , vw_club.secretaryid\n                 , vw_club.secretaryname\n                 , vw_club.secretarytitle\n                 , vw_club.accountid\n                 , vw_club.accountnumber\n                 , vw_club.accounttype\n                 , vw_club.ascription\n                 , vw_club.ascriptionplace\n                 , vw_club.parentorganizationid\n                 , get_districtstring( vw_club.organizationid ) AS parentorganizationname\n                 , vw_club.annotationattribid\n                 , vw_club.annotation\n                 , vw_club.info\n                 , vw_club.telephoneid\n                 , vw_club.typeoftelephone\n                 , vw_club.telephonedata\n                 , vw_club.faxid\n                 , vw_club.typeoffax\n                 , vw_club.faxdata\n                 , vw_club.emailid\n                 , vw_club.typeofemail\n                 , vw_club.emaildata\n                 , vw_club.urlid\n                 , vw_club.typeofurl\n                 , vw_club.urldata\n                 , vw_club.typeofclub\n                 , vw_club.categoryofclub\n                 , vw_club.searchname\n                 , vw_club.legalname\n                 , vw_club.legalform\n                 , vw_club.foundeddt\n                 , vw_club.dissolveddt\n                 , vw_club.registernr\n                 , vw_club.shirtcol\n                 , vw_club.trousercol\n                 , vw_club.sockcol\n                 , vw_club.awayshirtcol\n                 , vw_club.awaytrousercol\n                 , vw_club.awaysockcol\n                 , vw_club.reserveshirtcol\n                 , vw_club.reservetrousercol\n                 , vw_club.reservesockcol\n                 , vw_club.mainsponsor\n                 , vw_club.shirtsponsor\n                 , vw_club.youthtraininglevel\n                 , vw_club.zaalregio\n                 , vw_club.zaalregiodesc\n                 , vw_club.veldregio\n                 , vw_club.veldregiodesc\n                 , vw_club.verservice\n                 , vw_club.svcpaymethod\n                 , vw_club.svcaccountid\n                 , vw_club.svcaccountnumber\n                 , vw_club.svcaccounttype\n                 , vw_club.svcascription\n                 , vw_club.svcascriptionplace\n                 , vw_club.svcaltaccountid\n                 , vw_club.svcaltaccountnumber\n                 , vw_club.svcaltaccounttype\n                 , vw_club.svcaltascription\n                 , vw_club.svcaltascriptionplace\n                 , vw_club.mergedintoclubid\n                 , vw_club.mergedintoclub\n                 , vw_club.placeofbusiness\n                 , vw_club.logo\n                 , (SELECT COUNT(*)\n                     FROM   document\n                     WHERE  objectid = vw_club.organizationid\n                   ) AS documentcount\n                 , get_syb_districtcode( vw_club.parentorganizationid ) AS SportlinkClubRegionOwner\n            FROM   vw_club\n            WHERE  typeoforganization = 'CLUB'\n            AND    vw_club.organizationid = ?";
        matchingConditions = true;
      }
      mappableObject1.setQuery((String) sValue);
    }
    if (true) {
      {
        op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
        sValue = op.value;
        matchingConditions = true;
      }
      mappableObject1.setParameter(sValue);
    }
    if (!kill) { execute_sub0(access); }
    if (!kill) { execute_sub1(access); }
    if (true) {
      {
        sValue = "\n                SELECT address.addressid\n                ,      address.streetname\n                ,      address.housenumber\n                ,      address.numberappendix\n                ,      address.city\n                ,      address.zipcode\n                ,      address.countryid\n                ,      ( SELECT codedesc\n                         FROM   codetable\n                         WHERE  codeid     = LTRIM(RTRIM(address.countryid))\n                         AND    typeofcode = 'COUNTRY'\n                         AND    language   = get_default_language()\n                       ) AS country\n                FROM   address\n                ,      organizationaddress\n                WHERE  address.addressid                  = organizationaddress.addressid\n                AND    organizationaddress.organizationid = ?\n                AND    organizationaddress.typeofaddress  = 'VISITOR_ADDRESS'\n                AND    organizationaddress.preferred     != '1'\n                AND    rownum = 1\n            ";
        matchingConditions = true;
      }
      mappableObject1.setQuery((String) sValue);
    }
    if (true) {
      {
        op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
        sValue = op.value;
        matchingConditions = true;
      }
      mappableObject1.setParameter(sValue);
    }
    if (!kill) { execute_sub2(access); }
    if (true) {
      {
        sValue = "\n                        SELECT streetname\n                        ,      housenumber\n                        ,      numberappendix\n                        ,      zipcode\n                        ,      city\n                        FROM   facilityaddress fa\n                        ,      address a\n                        WHERE  fa.addressid = a.addressid\n                        AND    fa.facilityid = NVL( ( SELECT facilityid\n                                                      FROM   organizationfacilityattribute\n                                                      WHERE  organizationid = ?\n                                                      AND    attribname = 'DEFAULT_FACILITY'\n                                                      AND    attribvalue = '1'\n                                                      AND    rownum = 1\n                                                    ),\n                                                    ( SELECT facilityid\n                                                      FROM   organizationfacility\n                                                      WHERE  organizationid = ?\n                                                      AND    subfacilityid = 'FACILITY'\n                                                      AND rownum = 1\n                                                    )\n                                                  )\n            ";
        matchingConditions = true;
      }
      mappableObject1.setQuery((String) sValue);
    }
    if (true) {
      {
        op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
        sValue = op.value;
        matchingConditions = true;
      }
      mappableObject1.setParameter(sValue);
    }
    if (true) {
      {
        op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
        sValue = op.value;
        matchingConditions = true;
      }
      mappableObject1.setParameter(sValue);
    }
    if (!kill) { execute_sub3(access); }
  } catch (Exception e2) {
  MappingUtils.callKillMethod( mappableObject1);
    throw e2;
  }
  MappingUtils.callStoreMethod(mappableObject1);
  currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
} // EOF MapContext 
if (!kill) { execute_sub4(access); }
}// EOM
    private final void execute_sub0(Access access) throws Exception {

      if (!kill) {
      if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg)) { 
        count = 1;
        Message [] messageList0 = null;
        messageList0 = MappingUtils.addMessage(access.getOutputDoc(), currentOutMsg, "ClubData", "", count, "", "", "");
        for (int messageCount8 = 0; messageCount8 < messageList0.length; messageCount8++) {
 if (!kill) {
          outMsgStack.push(currentOutMsg);
          currentOutMsg = messageList0[messageCount8];
          access.setCurrentOutMessage(currentOutMsg);
          matchingConditions = false;
          {
            sValue = new Integer(mappableObject1.getTransactionContext());
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "TransactionContext", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("parentorganizationid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "ParentOrganizationId", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("zaalregio");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "SelectedRegionIndoor", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("veldregio");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "SelectedRegion", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("StringFunction('indexOf', [/@ParentOrganizationId], '-') != -1", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            op = Expression.evaluate("ToUpper( StringField( [/@ParentOrganizationId], '-', 3 ) ) + '_PLAYING_REGION'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
           else 
          {
            sValue = "BOND_PLAYING_REGION";
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "PlayingRegionTable", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("dissolveddt");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "DissolutionDate", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ClubIdentifier", sValue, type, subtype, "out", "Clubcode", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("parentorganizationid");
            com.dexels.navajo.functions.Trim function0 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function0.reset();
            function0.insertOperand(sValue);
            sValue = function0.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "RegionOwner", sValue, type, subtype, "out", "District", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("parentorganizationname");
            com.dexels.navajo.functions.Trim function1 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function1.reset();
            function1.insertOperand(sValue);
            sValue = function1.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "RegionOwnerName", sValue, type, subtype, "out", "District", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("name");
            com.dexels.navajo.functions.Trim function2 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function2.reset();
            function2.insertOperand(sValue);
            sValue = function2.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ClubName", sValue, type, subtype, "in", "Clubnaam", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("name");
            com.dexels.navajo.functions.Trim function3 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function3.reset();
            function3.insertOperand(sValue);
            sValue = function3.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "OriginalClubName", sValue, type, subtype, "out", "Originele Clubnaam", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("shortname");
            com.dexels.navajo.functions.Trim function4 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function4.reset();
            function4.insertOperand(sValue);
            sValue = function4.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ClubShortName", sValue, type, subtype, "in", "Verkorte naam", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeofclub");
            com.dexels.navajo.functions.Trim function5 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function5.reset();
            function5.insertOperand(sValue);
            sValue = function5.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "TypeOfClub", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.CodeDropdownList").newInstance(), false);
            mappableObject2 = (com.dexels.sportlink.adapters.CodeDropdownList) currentMap.myObject;
            mappableObject2.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject2.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "CLUB_TYPE";
                  matchingConditions = true;
                }
                mappableObject2.setTypeOfCode((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject2.setOrderByDescription(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  sValue = "Clubtype";
                  matchingConditions = true;
                }
                mappableObject2.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfClub";
                  matchingConditions = true;
                }
                mappableObject2.setName((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject2.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@TypeOfClub]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject2.setSelectedValue((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject2);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject2);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("categoryofclub");
            com.dexels.navajo.functions.Trim function6 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function6.reset();
            function6.insertOperand(sValue);
            sValue = function6.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CategoryOfClub", sValue, type, subtype, "in", "Clubcategorie", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("searchname");
            com.dexels.navajo.functions.Trim function7 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function7.reset();
            function7.insertOperand(sValue);
            sValue = function7.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "capitalization=upper";
          p = MappingUtils.setProperty(false, currentOutMsg, "ClubSearchName", sValue, type, subtype, "in", "Zoeknaam", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("legalname");
            com.dexels.navajo.functions.Trim function8 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function8.reset();
            function8.insertOperand(sValue);
            sValue = function8.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "LegalName", sValue, type, subtype, "in", "Juridische naam", 95, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("legalname");
            com.dexels.navajo.functions.GetCanonicalString function9 = (com.dexels.navajo.functions.GetCanonicalString) getFunction("com.dexels.navajo.functions.GetCanonicalString");
            function9.reset();
            function9.insertOperand(sValue);
            sValue = function9.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CurrentCanonicalLegalName", sValue, type, subtype, "out", "Huidige kanonieke juridische naam", 94, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("legalform");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "SelectedLegalForm", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.CodeDropdownList").newInstance(), false);
            mappableObject3 = (com.dexels.sportlink.adapters.CodeDropdownList) currentMap.myObject;
            mappableObject3.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject3.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "LEGAL_FORMS";
                  matchingConditions = true;
                }
                mappableObject3.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "LEGAL_FORMS";
                  matchingConditions = true;
                }
                mappableObject3.setTypeOfCode((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject3.setOrderByDescription(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  sValue = "Rechtsvorm";
                  matchingConditions = true;
                }
                mappableObject3.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "LegalForm";
                  matchingConditions = true;
                }
                mappableObject3.setName((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject3.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@SelectedLegalForm]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject3.setSelectedValue((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject3);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject3);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = "NAME_CHANGE";
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "TypeOfCharge", sValue, type, subtype, "out", "Kostentype bij naamsverandering", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("foundeddt");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "date";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "EstablishedDate", sValue, type, subtype, "in", "Oprichtingsdatum", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("FormatDate( [/@DissolutionDate], 'yyyy-MM-dd' ) == '9999-12-31'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            sValue = null;
            matchingConditions = true;
          }
           else 
          {
            op = Expression.evaluate("[/@DissolutionDate]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "date";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ClubLiquidationDate", sValue, type, subtype, "in", "Opheffingsdatum", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeofaddress");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "selectedTypeOfAddress", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.DropdownList").newInstance(), false);
            mappableObject4 = (com.dexels.sportlink.adapters.DropdownList) currentMap.myObject;
            mappableObject4.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject4.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "\n                        SELECT DISTINCT codeid, codedesc\n                        FROM            codetable\n                        WHERE           typeofcode = 'ADDRESS_TYPE'\n                        AND             language   = get_default_language()\n                        ORDER BY        codedesc\n                    ";
                  matchingConditions = true;
                }
                mappableObject4.setQuery((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject4.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@selectedTypeOfAddress]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject4.setSelectedValue((String) sValue);
              }
              if (true) {
                {
                  sValue = "Type adres";
                  matchingConditions = true;
                }
                mappableObject4.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfAddress";
                  matchingConditions = true;
                }
                mappableObject4.setName((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject4);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject4);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("streetname");
            com.dexels.navajo.functions.Trim function10 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function10.reset();
            function10.insertOperand(sValue);
            sValue = function10.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "StreetName", sValue, type, subtype, "in", "Straat", 45, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("SingleValueQuery( [/@TransactionContext], 'SELECT addresschangebyclub FROM vw_organization WHERE organizationid = ?', [/__globals__/UnionIdentifier] )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "AddressChangeByClub", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("[/@AddressChangeByClub] != null AND [/@AddressChangeByClub] == '1'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "boolean";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressChangeByClub", sValue, type, subtype, "out", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("annotationattribid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "integer";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AnnotationAttribId", sValue, type, subtype, "out", "Annotation attribute id", 12, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("annotation");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "Annotation", sValue, type, subtype, "in", "Annotation", 256, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("info");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "Info", sValue, type, subtype, "in", "Info", 256, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("telephoneid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "TelephoneId", sValue, type, subtype, "out", "Telefoon Identifier", 16, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeoftelephone");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "selectedTypeOfTelephone", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.DropdownList").newInstance(), false);
            mappableObject5 = (com.dexels.sportlink.adapters.DropdownList) currentMap.myObject;
            mappableObject5.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject5.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "COMMUNICATION_TYPE_PHONE";
                  matchingConditions = true;
                }
                mappableObject5.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "\n                        SELECT DISTINCT codeid, codedesc\n                        FROM            codetable\n                        WHERE           typeofcode = 'COMMUNICATION_TYPE'\n                        AND             language   = get_default_language()\n                        AND             codeid     LIKE '%PHONE%'\n                        ORDER BY        codedesc\n                    ";
                  matchingConditions = true;
                }
                mappableObject5.setQuery((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject5.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@selectedTypeOfTelephone]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject5.setSelectedValue((String) sValue);
              }
              if (true) {
                {
                  sValue = "Telephone Type";
                  matchingConditions = true;
                }
                mappableObject5.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfTelephone";
                  matchingConditions = true;
                }
                mappableObject5.setName((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject5);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject5);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("telephonedata");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "TelephoneData", sValue, type, subtype, "in", "Telefoon", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("SingleValueQuery([/@TransactionContext], 'SELECT communicationdata FROM orgfacilitycommunication WHERE organizationid = ? AND facilityid = (SELECT facilityid FROM organizationfacilityattribute WHERE organizationid = orgfacilitycommunication.organizationid AND attribname = ? AND attribvalue = ? AND rownum = 1) AND typeofcommunication = ? AND rownum = 1 ORDER BY preferred ASC', [/@ClubIdentifier], 'DEFAULT_FACILITY', '1', 'TELEPHONE')", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "DefaultFacilityNumber", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("[/@DefaultFacilityNumber] != null", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            op = Expression.evaluate("[/@DefaultFacilityNumber]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
           else 
          {
            op = Expression.evaluate("SingleValueQuery([/@TransactionContext], 'SELECT telephonedata FROM vw_facility WHERE facilityid = (SELECT facilityid FROM organizationfacilityattribute WHERE organizationid = ? AND attribname = ? AND attribvalue = ? AND rownum = 1)', [/@ClubIdentifier], 'DEFAULT_FACILITY', '1')", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "DefaultFacilityTelephoneData", sValue, type, subtype, "out", "Telefoon standaard accommodatie", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("faxid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "FaxId", sValue, type, subtype, "out", "Fax Identifier", 16, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeoffax");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "selectedTypeOfFax", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.DropdownList").newInstance(), false);
            mappableObject6 = (com.dexels.sportlink.adapters.DropdownList) currentMap.myObject;
            mappableObject6.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject6.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "COMMUNICATION_TYPE_FAX";
                  matchingConditions = true;
                }
                mappableObject6.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "\n                        SELECT DISTINCT codeid, codedesc\n                        FROM            codetable\n                        WHERE           typeofcode = 'COMMUNICATION_TYPE'\n                        AND             language   = get_default_language()\n                        AND             codeid     LIKE '%FAX%'\n                        ORDER BY        codedesc\n                    ";
                  matchingConditions = true;
                }
                mappableObject6.setQuery((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject6.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@selectedTypeOfFax]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject6.setSelectedValue((String) sValue);
              }
              if (true) {
                {
                  sValue = "Fax Type";
                  matchingConditions = true;
                }
                mappableObject6.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfFax";
                  matchingConditions = true;
                }
                mappableObject6.setName((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject6);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject6);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("faxdata");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "FaxData", sValue, type, subtype, "in", "Fax", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("emailid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "EmailId", sValue, type, subtype, "out", "E-mail Identifier", 16, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeofemail");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "selectedTypeOfEmail", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.DropdownList").newInstance(), false);
            mappableObject7 = (com.dexels.sportlink.adapters.DropdownList) currentMap.myObject;
            mappableObject7.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject7.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "COMMUNICATION_TYPE_EMAIL";
                  matchingConditions = true;
                }
                mappableObject7.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "\n                        SELECT DISTINCT codeid, codedesc\n                        FROM            codetable\n                        WHERE           typeofcode = 'COMMUNICATION_TYPE'\n                        AND             language   = get_default_language()\n                        AND             codeid     LIKE '%MAIL%'\n                        ORDER BY        codedesc\n                    ";
                  matchingConditions = true;
                }
                mappableObject7.setQuery((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject7.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@selectedTypeOfEmail]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject7.setSelectedValue((String) sValue);
              }
              if (true) {
                {
                  sValue = "E-mail Type";
                  matchingConditions = true;
                }
                mappableObject7.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfEmail";
                  matchingConditions = true;
                }
                mappableObject7.setName((String) sValue);
              }
              if (true) {
                if (Condition.evaluate("( [/@selectedTypeOfEmail] == 'MDESK_EMAIL' OR [/@selectedTypeOfEmail] == 'FORWARD_EMAIL' ) AND ! UserInRole( 'ADMINISTRATOR' )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))                {
                  sValue = "out";
                  matchingConditions = true;
                }
                 else 
                {
                  sValue = "in";
                  matchingConditions = true;
                }
                mappableObject7.setDirection((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject7);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject7);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          if (Condition.evaluate("( [/@selectedTypeOfEmail] != 'MDESK_EMAIL' AND [/@selectedTypeOfEmail] != 'FORWARD_EMAIL' ) OR UserInRole( 'ADMINISTRATOR' )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg)) { 
            matchingConditions = false;
            {
              sValue = mappableObject1.getColumnValue("emaildata");
              matchingConditions = true;
            }
            type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
            subtype = "uri=true";
            p = MappingUtils.setProperty(false, currentOutMsg, "EmailData", sValue, type, subtype, "in", "E-mail", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          } // EOF property condition 
          if (Condition.evaluate("( [/@selectedTypeOfEmail] == 'MDESK_EMAIL' OR  [/@selectedTypeOfEmail] == 'FORWARD_EMAIL' ) AND ! UserInRole( 'ADMINISTRATOR' )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg)) { 
            matchingConditions = false;
            {
              sValue = mappableObject1.getColumnValue("emaildata");
              matchingConditions = true;
            }
            type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
            subtype = "uri=true";
            p = MappingUtils.setProperty(false, currentOutMsg, "EmailData", sValue, type, subtype, "out", "E-mail", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          } // EOF property condition 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("urlid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "WebsiteId", sValue, type, subtype, "out", "Website Identifier", 16, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("typeofurl");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "selectedTypeOfWebsite", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.DropdownList").newInstance(), false);
            mappableObject8 = (com.dexels.sportlink.adapters.DropdownList) currentMap.myObject;
            mappableObject8.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject8.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "COMMUNICATION_TYPE_URL";
                  matchingConditions = true;
                }
                mappableObject8.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "\n                        SELECT DISTINCT codeid, codedesc\n                        FROM            codetable\n                        WHERE           typeofcode = 'COMMUNICATION_TYPE'\n                        AND             language   = get_default_language()\n                        AND             codeid     LIKE '%URL%'\n                        ORDER BY        codedesc\n                    ";
                  matchingConditions = true;
                }
                mappableObject8.setQuery((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject8.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@selectedTypeOfWebsite]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject8.setSelectedValue((String) sValue);
              }
              if (true) {
                {
                  sValue = "Website Type";
                  matchingConditions = true;
                }
                mappableObject8.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = "TypeOfWebsite";
                  matchingConditions = true;
                }
                mappableObject8.setName((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject8);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject8);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          if (Condition.evaluate("$columnValue('urldata') != null AND $columnValue('urldata') != '' AND StringFunction('indexOf', $columnValue('urldata'), 'http://') > -1", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            sValue = mappableObject1.getColumnValue("urldata");
            matchingConditions = true;
          }
           else 
          if (Condition.evaluate("$columnValue('urldata') != null AND $columnValue('urldata') != ''", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            op = Expression.evaluate("'http://' + $columnValue('urldata')", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
           else 
          {
            sValue = mappableObject1.getColumnValue("urldata");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "uri=true";
          p = MappingUtils.setProperty(false, currentOutMsg, "WebsiteData", sValue, type, subtype, "in", "Website", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("housenumber");
            com.dexels.navajo.functions.Trim function11 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function11.reset();
            function11.insertOperand(sValue);
            sValue = function11.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumber", sValue, type, subtype, "in", "Huisnummer", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("numberappendix");
            com.dexels.navajo.functions.Trim function12 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function12.reset();
            function12.insertOperand(sValue);
            sValue = function12.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumberAppendix", sValue, type, subtype, "in", "Toevoeging", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("zipcode");
            com.dexels.navajo.functions.Trim function13 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function13.reset();
            function13.insertOperand(sValue);
            sValue = function13.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ZipCode", sValue, type, subtype, "in", "Postcode", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("city");
            com.dexels.navajo.functions.Trim function14 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function14.reset();
            function14.insertOperand(sValue);
            sValue = function14.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "City", sValue, type, subtype, "in", "Plaats", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("countryid");
            com.dexels.navajo.functions.Trim function15 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function15.reset();
            function15.insertOperand(sValue);
            sValue = function15.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressCountryCode", sValue, type, subtype, "in", "Landcode", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("accountnumber");
            com.dexels.navajo.functions.Trim function16 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function16.reset();
            function16.insertOperand(sValue);
            sValue = function16.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "BankAccountNumber", sValue, type, subtype, "in", "Banknummer", 11, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("ascription");
            com.dexels.navajo.functions.Trim function17 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function17.reset();
            function17.insertOperand(sValue);
            sValue = function17.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "Ascription", sValue, type, subtype, "in", "Tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("ascriptionplace");
            com.dexels.navajo.functions.Trim function18 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function18.reset();
            function18.insertOperand(sValue);
            sValue = function18.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AscriptionPlace", sValue, type, subtype, "in", "Plaats tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcpaymethod");
            com.dexels.navajo.functions.Trim function19 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function19.reset();
            function19.insertOperand(sValue);
            sValue = function19.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(true, currentParamMsg, "SelectedPaymentMethod", sValue, type, subtype, "", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("secretaryid");
            com.dexels.navajo.functions.Trim function20 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function20.reset();
            function20.insertOperand(sValue);
            sValue = function20.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "SecretaryMemberIdentifier", sValue, type, subtype, "out", "Secretaris", 7, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("secretaryname");
            com.dexels.navajo.functions.Trim function21 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function21.reset();
            function21.insertOperand(sValue);
            sValue = function21.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "SecretaryName", sValue, type, subtype, "out", "Naam", 36, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("$columnValue( 'secretarytitle' ) != null", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            op = Expression.evaluate("$columnValue( 'secretarytitle' ) + ' ' + Trim( $columnValue( 'secretaryname' ) )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
           else 
          {
            sValue = mappableObject1.getColumnValue("secretaryname");
            com.dexels.navajo.functions.Trim function22 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function22.reset();
            function22.insertOperand(sValue);
            sValue = function22.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "TitledSecretaryName", sValue, type, subtype, "out", "Naam secretaris", 36, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.CodeDropdownList").newInstance(), false);
            mappableObject9 = (com.dexels.sportlink.adapters.CodeDropdownList) currentMap.myObject;
            mappableObject9.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject9.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  sValue = "PAYMENT_METHOD_TYPE";
                  matchingConditions = true;
                }
                mappableObject9.setTypeOfCode((String) sValue);
              }
              if (true) {
                {
                  sValue = "PAYMENT_METHOD_TYPE";
                  matchingConditions = true;
                }
                mappableObject9.setUseCache((String) sValue);
              }
              if (true) {
                {
                  sValue = "CollectionServicePaymentMethod";
                  matchingConditions = true;
                }
                mappableObject9.setName((String) sValue);
              }
              if (true) {
                {
                  sValue = "Contributieservice betaalwijze";
                  matchingConditions = true;
                }
                mappableObject9.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject9.setOrderByDescription(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@SelectedPaymentMethod]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject9.setSelectedValue((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject9);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject9);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.CodeDropdownList").newInstance(), false);
            mappableObject10 = (com.dexels.sportlink.adapters.CodeDropdownList) currentMap.myObject;
            mappableObject10.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject10.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@PlayingRegionTable]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject10.setTypeOfCode((String) sValue);
              }
              if (true) {
                {
                  sValue = "RegionField";
                  matchingConditions = true;
                }
                mappableObject10.setName((String) sValue);
              }
              if (true) {
                {
                  sValue = "Regio veld";
                  matchingConditions = true;
                }
                mappableObject10.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject10.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@SelectedRegion]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject10.setSelectedValue((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject10);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject10);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          { // Starting new mappable object context. 
            treeNodeStack.push(currentMap);
            currentMap = new MappableTreeNode(access, currentMap, classLoader.getClass("com.dexels.sportlink.adapters.CodeDropdownList").newInstance(), false);
            mappableObject11 = (com.dexels.sportlink.adapters.CodeDropdownList) currentMap.myObject;
            mappableObject11.load(access);
            try {
              if (true) {
                {
                  op = Expression.evaluate("[/@TransactionContext]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject11.setTransactionContext(((Integer) sValue).intValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@PlayingRegionTable]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject11.setTypeOfCode((String) sValue);
              }
              if (true) {
                {
                  sValue = "RegionIndoor";
                  matchingConditions = true;
                }
                mappableObject11.setName((String) sValue);
              }
              if (true) {
                {
                  sValue = "Regio zaal";
                  matchingConditions = true;
                }
                mappableObject11.setDescription((String) sValue);
              }
              if (true) {
                {
                  sValue = new Boolean(true);
                  matchingConditions = true;
                }
                mappableObject11.setEmptyOption(((Boolean) sValue).booleanValue());
              }
              if (true) {
                {
                  op = Expression.evaluate("[/@SelectedRegionIndoor]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
                  sValue = op.value;
                  matchingConditions = true;
                }
                mappableObject11.setSelectedValue((String) sValue);
              }
            } catch (Exception e12) {
            MappingUtils.callKillMethod( mappableObject11);
              throw e12;
            }
            MappingUtils.callStoreMethod(mappableObject11);
            currentMap.setEndtime();
currentMap = (MappableTreeNode) treeNodeStack.pop();
          } // EOF MapContext 
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("registernr");
            com.dexels.navajo.functions.Trim function23 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function23.reset();
            function23.insertOperand(sValue);
            sValue = function23.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "BusinessRegistrationNumber", sValue, type, subtype, "in", "Kamer van Koophandelnummer", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("shirtcol");
            com.dexels.navajo.functions.Trim function24 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function24.reset();
            function24.insertOperand(sValue);
            sValue = function24.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "HomeShirtColors", sValue, type, subtype, "in", "Shirtkleuren (thuis)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("trousercol");
            com.dexels.navajo.functions.Trim function25 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function25.reset();
            function25.insertOperand(sValue);
            sValue = function25.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "HomeShortsColors", sValue, type, subtype, "in", "Broekkleuren (thuis)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("sockcol");
            com.dexels.navajo.functions.Trim function26 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function26.reset();
            function26.insertOperand(sValue);
            sValue = function26.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "HomeStockingColors", sValue, type, subtype, "in", "Kousenkleuren (thuis)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("awayshirtcol");
            com.dexels.navajo.functions.Trim function27 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function27.reset();
            function27.insertOperand(sValue);
            sValue = function27.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AwayShirtColors", sValue, type, subtype, "in", "Shirtkleuren (uit)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("awaytrousercol");
            com.dexels.navajo.functions.Trim function28 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function28.reset();
            function28.insertOperand(sValue);
            sValue = function28.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AwayShortsColors", sValue, type, subtype, "in", "Broekkleuren (uit)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("awaysockcol");
            com.dexels.navajo.functions.Trim function29 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function29.reset();
            function29.insertOperand(sValue);
            sValue = function29.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AwayStockingColors", sValue, type, subtype, "in", "Kousenkleuren (uit)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("reserveshirtcol");
            com.dexels.navajo.functions.Trim function30 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function30.reset();
            function30.insertOperand(sValue);
            sValue = function30.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ReserveShirtColors", sValue, type, subtype, "in", "Shirtkleuren (reserve)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("reservetrousercol");
            com.dexels.navajo.functions.Trim function31 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function31.reset();
            function31.insertOperand(sValue);
            sValue = function31.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ReserveShortsColors", sValue, type, subtype, "in", "Broekkleuren (reserve)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("reservesockcol");
            com.dexels.navajo.functions.Trim function32 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function32.reset();
            function32.insertOperand(sValue);
            sValue = function32.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ReserveStockingColors", sValue, type, subtype, "in", "Kousenkleuren (reserve)", 128, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("mainsponsor");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "MainSponsor", sValue, type, subtype, "in", "Hoofdsponsor", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("shirtsponsor");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ShirtSponsor", sValue, type, subtype, "in", "Shirtsponsor", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("$columnValue( 'youthtraininglevel' ) != null", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            sValue = mappableObject1.getColumnValue("youthtraininglevel");
            matchingConditions = true;
          }
           else 
          {
            sValue = "0";
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "YouthTrainingLevel", sValue, type, subtype, "in", "Niveau jeugdopleiding", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("$columnValue( 'verservice' ) == '1'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            sValue = new Boolean(true);
            matchingConditions = true;
          }
           else 
          {
            sValue = new Boolean(false);
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "isCollectionServiced", sValue, type, subtype, "in", "Deelnemend in Contributieservice", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcaccountnumber");
            com.dexels.navajo.functions.Trim function33 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function33.reset();
            function33.insertOperand(sValue);
            sValue = function33.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceBankAccountNumber", sValue, type, subtype, "in", "Contributieservice banknummer", 11, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcascription");
            com.dexels.navajo.functions.Trim function34 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function34.reset();
            function34.insertOperand(sValue);
            sValue = function34.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceAscription", sValue, type, subtype, "in", "Contributieservice tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcascriptionplace");
            com.dexels.navajo.functions.Trim function35 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function35.reset();
            function35.insertOperand(sValue);
            sValue = function35.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceAscriptionPlace", sValue, type, subtype, "in", "Contributieservice plaats tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcaltaccountnumber");
            com.dexels.navajo.functions.Trim function36 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function36.reset();
            function36.insertOperand(sValue);
            sValue = function36.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceAlternateBankAccountNumber", sValue, type, subtype, "in", "Contributieservice alternatief banknummer", 11, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcaltascription");
            com.dexels.navajo.functions.Trim function37 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function37.reset();
            function37.insertOperand(sValue);
            sValue = function37.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceAlternateAscription", sValue, type, subtype, "in", "Contributieservice alternatieve tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("svcascriptionplace");
            com.dexels.navajo.functions.Trim function38 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function38.reset();
            function38.insertOperand(sValue);
            sValue = function38.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "CollectionServiceAlternateAscriptionPlace", sValue, type, subtype, "in", "Contributieservice alternatieve plaats tenaamstelling", 51, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("$columnValue( 'mergedintoclubid' ) )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "MergedIntoClubId", sValue, type, subtype, "out", "Club id of club into which this club was merged", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("$columnValue( 'mergedintoclub' ) )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "MergedIntoClub", sValue, type, subtype, "out", "Club name of club into which this club was merged", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("$columnValue( 'placeofbusiness' ) )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "PlaceOfBusiness", sValue, type, subtype, "in", "Place of business", 64, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("logo");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "binary";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "Logo", sValue, type, subtype, "in", "Clublogo", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("ScaleImageMax( $columnValue( 'logo' ), 240, 240 )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "binary";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "SmallLogo", sValue, type, subtype, "out", "Small Club logo", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("$columnValue('documentcount') > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "HasDocuments", sValue, type, subtype, "out", "Has Couple of Documents", 16, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          if (Condition.evaluate("$columnValue('SportlinkClubRegionOwner') != null", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))          {
            sValue = mappableObject1.getColumnValue("SportlinkClubRegionOwner");
            matchingConditions = true;
          }
           else 
          {
            sValue = mappableObject1.getColumnValue("parentorganizationid");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "SportlinkClubRegionOwner", sValue, type, subtype, "out", "Sportlink Club Region Owner (special format..)", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = "";
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "TelephoneNumber", sValue, type, subtype, "in", "", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("verservice");
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "boolean";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "isCOS", sValue, type, subtype, "out", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("SingleValueQuery([/@TransactionContext], 'SELECT sportdesc FROM vw_club_sport WHERE isstatutory = 1 AND organizationid = ? AND rownum = 1', [/@ClubIdentifier])", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "StatutorySport", sValue, type, subtype, "out", "Statutaire speeldag", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = new Boolean(true);
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "boolean";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "HasFinancialRole", sValue, type, subtype, "out", "", 4, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("UserInRole( 'FINANCE' )", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "boolean";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AllowPaymentsAfterLiquidation", sValue, type, subtype, "out", "", 4, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            op = Expression.evaluate("SingleValueQuery([/@TransactionContext], 'SELECT MAX( organizationperson.lastupdate ) FROM organizationperson WHERE organizationperson.organizationid = ?', [/@ClubIdentifier])", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
            sValue = op.value;
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "MemberLastUpdate", sValue, type, subtype, "out", "Laatste mutatie lid", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        currentOutMsg = (Message) outMsgStack.pop();
        access.setCurrentOutMessage(currentOutMsg);
        }
 } // EOF messageList for 
      } // EOF message condition 
      }
}


    private final void execute_sub1(Access access) throws Exception {

      if (!kill) {
      if (Condition.evaluate("$rowCount == 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg)) { 
        count = 1;
        Message [] messageList1 = null;
        messageList1 = MappingUtils.addMessage(access.getOutputDoc(), currentOutMsg, "ClubNotFound", "", count, "", "", "");
        for (int messageCount8 = 0; messageCount8 < messageList1.length; messageCount8++) {
 if (!kill) {
          outMsgStack.push(currentOutMsg);
          currentOutMsg = messageList1[messageCount8];
          access.setCurrentOutMessage(currentOutMsg);
        currentOutMsg = (Message) outMsgStack.pop();
        access.setCurrentOutMessage(currentOutMsg);
        }
 } // EOF messageList for 
      } // EOF message condition 
      }
}


    private final void execute_sub2(Access access) throws Exception {

      if (!kill) {
      count = 1;
      Message [] messageList2 = null;
      messageList2 = MappingUtils.addMessage(access.getOutputDoc(), currentOutMsg, "VisitorAddress", "", count, "", "", "");
      for (int messageCount6 = 0; messageCount6 < messageList2.length; messageCount6++) {
 if (!kill) {
        outMsgStack.push(currentOutMsg);
        currentOutMsg = messageList2[messageCount6];
        access.setCurrentOutMessage(currentOutMsg);
        matchingConditions = false;
        {
          op = Expression.evaluate("[/@ClubIdentifier]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
          sValue = op.value;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "OrganizationId", sValue, type, subtype, "out", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        {
          sValue = "VISITOR_ADDRESS";
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "integer";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "TypeOfAddress", sValue, type, subtype, "out", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("addressid");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "integer";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "AddressId", sValue, type, subtype, "out", "", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("streetname");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "StreetName", sValue, type, subtype, "in", "Straat", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("housenumber");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "integer";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumber", sValue, type, subtype, "in", "Huisnummer", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("numberappendix");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumberAppendix", sValue, type, subtype, "in", "Toevoeging", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("city");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "City", sValue, type, subtype, "in", "Plaats", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("zipcode");
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "ZipCode", sValue, type, subtype, "in", "Postcode", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          sValue = mappableObject1.getColumnValue("countryid");
          matchingConditions = true;
        }
         else 
        {
          sValue = "NL";
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "AddressCountryCode", sValue, type, subtype, "in", "Landcode", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        matchingConditions = false;
        if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg))        {
          op = Expression.evaluate("'http://www.google.com/maps?source=uds&daddr=' + $columnValue('streetname') + '+' + $columnValue('housenumber') + ',+' + $columnValue('zipcode') + ',+' + $columnValue('city') + ',+' + $columnValue('country') + '&iwstat1=dir:to'", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
          sValue = op.value;
          matchingConditions = true;
        }
         else 
        {
          sValue = null;
          matchingConditions = true;
        }
        type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
        subtype = "";
        p = MappingUtils.setProperty(false, currentOutMsg, "RouteTo", sValue, type, subtype, "out", "Plan route naar..", -1, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
      currentOutMsg = (Message) outMsgStack.pop();
      access.setCurrentOutMessage(currentOutMsg);
      }
 } // EOF messageList for 
      }
}


    private final void execute_sub3(Access access) throws Exception {

      if (!kill) {
      if (Condition.evaluate("$rowCount > 0", access.getInDoc(), currentMap, currentInMsg, currentParamMsg)) { 
        count = 1;
        Message [] messageList3 = null;
        messageList3 = MappingUtils.addMessage(access.getOutputDoc(), currentOutMsg, "DefaultFacilityAddress", "", count, "", "", "");
        for (int messageCount8 = 0; messageCount8 < messageList3.length; messageCount8++) {
 if (!kill) {
          outMsgStack.push(currentOutMsg);
          currentOutMsg = messageList3[messageCount8];
          access.setCurrentOutMessage(currentOutMsg);
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("streetname");
            com.dexels.navajo.functions.Trim function39 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function39.reset();
            function39.insertOperand(sValue);
            sValue = function39.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "StreetName", sValue, type, subtype, "in", "Straat", 45, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("housenumber");
            com.dexels.navajo.functions.Trim function40 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function40.reset();
            function40.insertOperand(sValue);
            sValue = function40.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumber", sValue, type, subtype, "in", "Huisnummer", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("numberappendix");
            com.dexels.navajo.functions.Trim function41 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function41.reset();
            function41.insertOperand(sValue);
            sValue = function41.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "AddressNumberAppendix", sValue, type, subtype, "in", "Toevoeging", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("zipcode");
            com.dexels.navajo.functions.Trim function42 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function42.reset();
            function42.insertOperand(sValue);
            sValue = function42.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "ZipCode", sValue, type, subtype, "in", "Postcode", 15, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
          matchingConditions = false;
          {
            sValue = mappableObject1.getColumnValue("city");
            com.dexels.navajo.functions.Trim function43 = (com.dexels.navajo.functions.Trim) getFunction("com.dexels.navajo.functions.Trim");
            function43.reset();
            function43.insertOperand(sValue);
            sValue = function43.evaluate();
            matchingConditions = true;
          }
          type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
          subtype = "";
          p = MappingUtils.setProperty(false, currentOutMsg, "City", sValue, type, subtype, "in", "Plaats", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
        currentOutMsg = (Message) outMsgStack.pop();
        access.setCurrentOutMessage(currentOutMsg);
        }
 } // EOF messageList for 
      } // EOF message condition 
      }
}


private final void execute_sub4(Access access) throws Exception {

  if (!kill) {
  count = 1;
  Message [] messageList4 = null;
  messageList4 = MappingUtils.addMessage(access.getOutputDoc(), currentOutMsg, "DatabaseStatus", "", count, "", "", "");
  for (int messageCount2 = 0; messageCount2 < messageList4.length; messageCount2++) {
 if (!kill) {
    outMsgStack.push(currentOutMsg);
    currentOutMsg = messageList4[messageCount2];
    access.setCurrentOutMessage(currentOutMsg);
    matchingConditions = false;
    {
      op = Expression.evaluate("[/@DatabaseProductName]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
    subtype = "";
    p = MappingUtils.setProperty(false, currentOutMsg, "DatabaseProductName", sValue, type, subtype, "out", "", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
    matchingConditions = false;
    {
      op = Expression.evaluate("[/@DatabaseVersion]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
    subtype = "";
    p = MappingUtils.setProperty(false, currentOutMsg, "DatabaseVersion", sValue, type, subtype, "out", "", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
    matchingConditions = false;
    {
      op = Expression.evaluate("[/__globals__/KernelSchemaOwner]", access.getInDoc(), currentMap, currentInMsg, currentParamMsg, currentSelection, null);
      sValue = op.value;
      matchingConditions = true;
    }
    type = (sValue != null) ? MappingUtils.determineNavajoType(sValue) : "string";
    subtype = "";
    p = MappingUtils.setProperty(false, currentOutMsg, "DatabaseSchemaOwner", sValue, type, subtype, "out", "", 32, access.getOutputDoc(), access.getInDoc(), !matchingConditions);
p.setCardinality("1");
  currentOutMsg = (Message) outMsgStack.pop();
  access.setCurrentOutMessage(currentOutMsg);
  }
 } // EOF messageList for 
  }
}


com.dexels.navajo.adapter.NavajoAccess mappableObject0 = null;
com.dexels.navajo.adapter.SQLMap mappableObject1 = null;
com.dexels.sportlink.adapters.CodeDropdownList mappableObject2 = null;
com.dexels.sportlink.adapters.CodeDropdownList mappableObject3 = null;
com.dexels.sportlink.adapters.DropdownList mappableObject4 = null;
com.dexels.sportlink.adapters.DropdownList mappableObject5 = null;
com.dexels.sportlink.adapters.DropdownList mappableObject6 = null;
com.dexels.sportlink.adapters.DropdownList mappableObject7 = null;
com.dexels.sportlink.adapters.DropdownList mappableObject8 = null;
com.dexels.sportlink.adapters.CodeDropdownList mappableObject9 = null;
com.dexels.sportlink.adapters.CodeDropdownList mappableObject10 = null;
com.dexels.sportlink.adapters.CodeDropdownList mappableObject11 = null;
public void setDependencies() {
dependentObjects.add( new IncludeDependency( new Long("1158569608000"), "include/IncludeOracle"));
dependentObjects.add( new JavaDependency( -1, "com.dexels.navajo.adapter.NavajoAccess"));
dependentObjects.add( new JavaDependency( -1, "com.dexels.navajo.adapter.SQLMap"));
dependentObjects.add( new AdapterFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "database", "'sportlinkkernel'"));
dependentObjects.add( new ExpressionValueDependency(-1, "document\n", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "vw_club\n", "table"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "document\n"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "vw_club\n"));
dependentObjects.add( new JavaDependency( -1, "com.dexels.sportlink.adapters.CodeDropdownList"));
dependentObjects.add( new AdapterFieldDependency(-1, "com.dexels.sportlink.adapters.CodeDropdownList", "codetable", "'CLUB_TYPE'"));
dependentObjects.add( new AdapterFieldDependency(-1, "com.dexels.sportlink.adapters.CodeDropdownList", "codetable", "'LEGAL_FORMS'"));
dependentObjects.add( new JavaDependency( -1, "com.dexels.sportlink.adapters.DropdownList"));
dependentObjects.add( new ExpressionValueDependency(-1, "codetable\n", "table"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.sportlink.adapters.DropdownList", "table", "codetable\n"));
dependentObjects.add( new ExpressionValueDependency(-1, "vw_organization", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "organizationfacilityattribute", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "orgfacilitycommunication", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "vw_facility", "table"));
dependentObjects.add( new AdapterFieldDependency(-1, "com.dexels.sportlink.adapters.CodeDropdownList", "codetable", "'PAYMENT_METHOD_TYPE'"));
dependentObjects.add( new AdapterFieldDependency(-1, "com.dexels.sportlink.adapters.CodeDropdownList", "codetable", "[/@PlayingRegionTable]"));
dependentObjects.add( new ExpressionValueDependency(-1, "vw_club_sport", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "organizationperson", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "address\n", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "organizationaddress\n", "table"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "codetable\n"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "address\n"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "organizationaddress\n"));
dependentObjects.add( new ExpressionValueDependency(-1, "facilityaddress", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "address", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "organizationfacilityattribute\n", "table"));
dependentObjects.add( new ExpressionValueDependency(-1, "organizationfacility\n", "table"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "facilityaddress"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "address"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "organizationfacilityattribute\n"));
dependentObjects.add( new com.dexels.navajo.mapping.compiler.meta.SQLFieldDependency(-1, "com.dexels.navajo.adapter.SQLMap", "table", "organizationfacility\n"));
}

public ArrayList<Dependency> getDependentObjects() {
   return dependentObjects;
}

public String getAuthor() {
   return "Arjen Schoneveld";
}

public String getDescription() {
   return "Processing script for retrieving all relevant club data";
}

public String getScriptType() {
   return "navascript";
}

}//EOF